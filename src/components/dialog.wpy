<template>
  <view class="zan-dialog {{ show ? 'zan-dialog--show' : '' }}">
    <view class="zan-dialog--mask"></view>
    <view class="zan-dialog--container">
      <view
        wx:if="{{ title }}"
        class="zan-dialog__header">{{ title }}</view>
      <view
        class="zan-dialog__content {{ title ? 'zan-dialog__content--title' : '' }}">{{ content }}</view>
      <view
        class="zan-dialog__footer {{ buttonsShowVertical ? 'zan-dialog__footer--vertical' : 'zan-dialog__footer--horizon' }}">
        <block wx:for="{{ buttons }}" wx:key="{{ item.text }}-{{ item.type }}">
          <button
            class="zan-dialog__button zan-btn"
            data-type="{{ item.type }}"
            @tap="_handleZanDialogButtonClick"
            style="color: {{ item.color || '#333' }}">{{ item.text }}</button>
        </block>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
export default class Dialog extends wepy.component {
    props = {
        // 自定义 btn 列表
        // { type: 按钮类型，回调时以此作为区分依据，text: 按钮文案, color: 按钮文字颜色 }
        buttons: {
            type: Array,
            default: []
        },
        // 标题
        title: {
            type: String,
            default: ''
        },
        // 内容
        content: {
            type: String,
            default: ''
        },
        // 确认按钮文案
        confirmText: {
            type: String,
            default: '确定'
        },
        // 取消按钮文案
        cancelText: {
            type: String,
            default: '取消'
        },
        // 确认按钮颜色
        confirmColor: {
            type: String,
            default: '#3CC51F'
        },
        // 取消按钮颜色
        cancelColor: {
            type: String,
            default: '#333'
        },
        //按钮是否展示为纵向
        buttonsShowVertical: {
            type: [Boolean, String],
            default: false
        },
        // 是否展示确定
        showConfirm: {
            type: [Boolean, String],
            default: true
        },
        // 是否展示取消
        showCancel: {
            type: [Boolean, String],
            default: false
        },
        //确定后的callback
        bindcomfirm: {
            type: String,
            default: ''
        },
        //取消后的callback
        bindcancel: {
            type: String,
            default: ''
        }
    }

    data = {
        showCustomBtns: false,
        show: false
    }

    methods = {
        _handleZanDialogButtonClick(e) {
            const model = this,
                  type = e.currentTarget.dataset.type
            model.show = false
            if (type == 'confirm' && typeof model.$parent[model.bindcomfirm] === 'function') {
                model.$parent[model.bindcomfirm]()
            }

            if (type == 'cancel' && typeof model.$parent[model.bindcancel] === 'function') {
               model.$parent[model.bindcancel]()
            }  
        },
        show() {
            this.show = true
        }
    }

    onLoad() {
        this.init()
    }

    init() {
        //初始化组件
        if (this.buttons.length === 0) {
            if (this.showConfirm) {
                this.buttons.push({
                    type: 'confirm',
                    text: this.confirmText,
                    color: this.confirmColor
                });
            }
            if (this.showCancel) {
                const cancelButton = {
                    type: 'cancel',
                    text: this.cancelText,
                    color: this.cancelColor
                }
                if (this.buttonsShowVertical) {
                    this.buttons.push(cancelButton);
                } else {
                    this.buttons.unshift(cancelButton);
                }
            }
        } else {
            this.showCustomBtns = true;
        }
   }

}
</script>


<style lang="less">
/* 基础样式 */
.zan-dialog--container {
  position: fixed;
  top: 45%;
  left: 50%;
  width: 80%;
  height: 0;
  font-size: 16px;
  overflow: hidden;
  transition: all 0.2s linear;
  border-radius: 4px;
  background-color: #fff;
  transform: translate3d(-50%, -50%, 0);
  color: #333;
  opacity: 0;
  z-index: 999;
}

.zan-dialog--mask {
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.6);
  transition: 0.3s;
  display: none;
   z-index: 998;
}

/* 弹出层内容 */
.zan-dialog__header {
  padding: 15px 0 0;
  text-align: center;
}

.zan-dialog__content {
  position: relative;
  padding: 15px 20px;
  line-height: 1.5;
  min-height: 40px;

  &::after {
    .hairline();
    border-bottom-width: 1px;
  }
}

/* 在有标题时，需要减弱内容的存在感 */
.zan-dialog__content--title {
  color: #999;
  font-size: 14px;
}

.zan-dialog__footer {
  overflow: hidden;
}

.zan-dialog__button {
  line-height: 50px;
  height: 50px;
  padding: 0 5px;
  border-radius: 0;
  margin-bottom: 0;

  &::after {
    border-width: 0;
    border-radius: 0;
  }
}

/* 展示时，样式重置 */
.zan-dialog--show .zan-dialog--container {
  opacity: 1;
  height: auto;
}

.zan-dialog--show .zan-dialog--mask {
  display: block;
}

/* 水平/垂直布局 */
.zan-dialog__footer--horizon {
  display: flex;
}

.zan-dialog__footer--horizon .zan-dialog__button {
  flex: 1;

  &::after {
    border-right-width: 1px;
  }

  &:last-child::after {
    border-right-width: 0;
  }
}

.zan-dialog__footer--vertical .zan-dialog__button {
  flex: 1;

  &::after {
    border-bottom-width: 1px;
  }

  &:last-child::after {
    border-bottom-width: 0;
  }
}
</style>

